#!/bin/bash

# USAGE: source test/setup_virtualenv
#
# This will set up virtualenv and install the necessary python library,
# as explained in the README.
#
# If you execute this instead of sourcing it, it will not work.
#
# This script accepts one optional argument; a python version number. The
# version is expected to be one of 2, 3, 3.5, 3.6, 3.7, 3.8 or 3.9. The version
# defaults to "2".

set -o nounset
set -o xtrace
set -o errexit

function install_pyenv() {
  if ! which pyenv; then
    echo "pyenv is not installed. Installing..."
    git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH="${PYENV_ROOT}/bin:${PATH}"
    eval "$(pyenv init --path)"
  fi
}
readonly -f install_pyenv

readonly VERSION_ARG="${1}"

declare PY_VERSION=""
declare LIBS_FOLDER=""
if [[ -z "${VERSION_ARG}" ]]; then
  PY_VERSION="python2"
elif grep -Pq "^[23]\.?[5-9]?.?[1-9]$" <<< "${VERSION_ARG}" ; then
  PY_VERSION="python${VERSION_ARG}"
else
  echo "ERROR: Python version must be a value from 2.7 to 3.9"
  return
fi
readonly PY_VERSION

if [[ "${PY_VERSION}" == "python2" ]]; then
  LIBS_FOLDER="dsub_libs"
else
  LIBS_FOLDER="dsub_libs$VERSION_ARG"
fi
readonly LIBS_FOLDER

if ! PY_PATH="$(which "${PY_VERSION}")"; then
  echo "${PY_VERSION} executable not found. Instead, attempt to change pyenv to ${VERSION_ARG}"
  # Check what versions are available and which one is set
  install_pyenv
  pyenv versions
  # pyenv global will set the PATH for python to be this specific version
  pyenv install "${VERSION_ARG}"
  pyenv global "${VERSION_ARG}"
  # Confirm the specified version is set
  pyenv versions
fi

if [[ $(basename "${VIRTUAL_ENV:-}") == "${LIBS_FOLDER}" && -d "${VIRTUAL_ENV:-}" ]]; then
  echo "We are already running in a virtual environment:"
  echo "${VIRTUAL_ENV}"
  echo "It ends in ${LIBS_FOLDER} so it's probably the same I was about to set up."
  echo "Skipping."
  return
fi

echo "Creating virtualenv in: ${PWD}/${LIBS_FOLDER}"

if [[ -n "${VIRTUAL_ENV:-}" ]]; then
  echo "WARNING: a virtual environment is already active: ${VIRTUAL_ENV}"
  echo "WARNING: continuing to set up and activate ${LIBS_FOLDER}"
fi

if [[ ! -f "${LIBS_FOLDER}/bin/activate" ]]; then
  echo "setting up ${LIBS_FOLDER}/"
  if ! python -m venv "${LIBS_FOLDER}"; then
    echo "Virtual environment creation failed."
    return
  fi
fi

if [[ ! -f "${LIBS_FOLDER}/bin/activate" ]]; then
  echo "${LIBS_FOLDER}/bin/activate not found. Did the virtualenv call fail?"
  return
fi

if source "${LIBS_FOLDER}/bin/activate"; then
  echo "virtualenv activate succeeded."
else
  echo "virtualenv activate failed."
fi

if [[ $(basename "${VIRTUAL_ENV:-}") != "${LIBS_FOLDER}" ]]; then
  echo "Error: We should be in the ${LIBS_FOLDER} virtualenv but are not."
  echo "We are in: ${VIRTUAL_ENV:-}"
  return
fi

echo "python version is..."
python --version

echo "Running setup.py."
python -m pip install .

echo "virtualenv should be correctly set up now. When you are done type"
echo "'deactivate' to exit the virtualenv environment."
